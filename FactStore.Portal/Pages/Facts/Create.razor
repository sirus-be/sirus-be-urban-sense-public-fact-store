@page "/facts/create"
@page "/facts/create/{FactTypeName}"
@attribute [Authorize(Roles = Roles.Admin + "," + Roles.SuperAdmin + "," + Roles.Writer)]
<style>
    .rz-fieldset {
        width: 700px;
    }

    .rz-dropdown {
        width: 100%;
    }
</style>

<div style="margin-bottom:2em">
    <RadzenLink Path="@Config.Value.PortalUri" Text="Portaal" target="_self" />/<RadzenLink Path="/" Text="Fact store" target="_self" />/<RadzenLink Path="/facts" Text="Facts" target="_self" />/ Fact aanmaken
</div>

<h3>Fact aanmaken</h3>

<div style="text-align: right; width:100%">
    <RadzenLink Path="/facts" Text="Terug naar facts" Style="margin: 0 1rem 1rem 0" />
</div>

<RadzenTemplateForm Data="@fact" Submit="(Fact fact) => Submit(fact)">
    <div class="row">
        <RadzenFieldset Text="Nieuw fact">
            <div class="row" style="margin-bottom:1rem;">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Sleutel" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox Style="width:100%" Name="Key" @bind-Value="fact.Key" />
                    <RadzenRequiredValidator Component="Key" Text="Sleutel is verplicht" />
                </div>
            </div>
            <div class="row" style="margin-bottom:1rem;">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Waarde" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox Style="width:100%" Name="Value" @bind-Value="fact.Value" />
                    <RadzenRequiredValidator Component="Value" Text="Waarde is verplicht" />
                </div>
            </div>
            <div class="row" style="margin-bottom:1rem;">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Omschrijving" />
                </div>
                <div class="col-md-8">
                    <RadzenTextArea Style="width:100%" Name="Description" @bind-Value="fact.Description" />
                </div>
            </div>
            <div class="row" style="margin-bottom:1rem">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Fact types" />
                </div>
                <div class="col-md-8">
                    <RadzenDropDown Name="FactType"
                                    AllowClear="true"
                                    TValue="string"
                                    AllowVirtualization="true"
                                    LoadData=@LoadDataVirtualization
                                    AllowFiltering="true"
                                    Count="@count"
                                    Data=@factTypes
                                    @bind-Value=@selectedFactType />
                    <RadzenRequiredValidator Component="FactType" Text="Fact type is verplicht" />

                </div>
            </div>
            <div style="text-align:right; width:100%">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Aanmaken" />
            </div>
        </RadzenFieldset>
    </div>
</RadzenTemplateForm>

    @code {
    [Inject]
    private IFactStoreServiceClient FactStoreServiceClient { get; set; }

    [Parameter]
    public string FactTypeName { get; set; }

    Fact fact = new Fact();

    int count;
    int pageSize;
    IEnumerable<string> factTypes { get; set; }
    string selectedFactType { get; set; }

    private async Task LoadDataVirtualization(LoadDataArgs args)
    {
        try
        {
            var factParameters = new FactTypeParameters
                {
                    PageIndex = args.Skip ?? default(int),
                    PageSize = args.Top.Value,
                    Search = args.Filter,
                };

            var query = await FactStoreServiceClient.GetFactTypesAsync(factParameters);
            var result = query.AsQueryable();
            count = query.Count;
            pageSize = args.Top.Value;
            factTypes = result.Select(x => x.Name).ToArray();

            if (FactTypeName != null)
            {
                selectedFactType = FactTypeName;
            }
        }
        catch (Exception)
        {
            factTypes = Enumerable.Empty<string>().ToList();
        }
    }

    private async Task Submit(Fact fact)
    {
        if (selectedFactType != null)
        {
            fact.FactTypeName = selectedFactType;

            try
            {

                await FactStoreServiceClient.PostFactAsync(fact);
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Succes", Detail = "Fact type succesvol toegevoegd." });
                EmptyForm();
                if (FactTypeName != null)
                {
                    NavigationManager.NavigateTo($"facttypes/edit/{FactTypeName}");
                }
                else
                {
                    NavigationManager.NavigateTo("/facts");
                }
            }
            catch (Exception ex)
            {
                fact = new Fact();
                string errorMessage = string.IsNullOrWhiteSpace(ex.Message) ? "Oeps! Er is iets fout gegaan." : ex.Message;
                NotificationService.Notify(NotificationSeverity.Error, "Error", errorMessage);
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Error", Detail = "Een fact moet een fact type hebben" });
        }
    }

    private void EmptyForm()
    {
        fact = new Fact();
        selectedFactType = string.Empty;
    }
    }
