@page "/roles/edit"
@page "/roles/edit/{Name}"
@attribute [Authorize(Roles = Roles.SuperAdmin)]
<style>
    .rz-fieldset {
        width:600px;
    }

    .rz-dropdown{
        width:100%;
    }
</style>
    <div style="margin-bottom:2em">
        <RadzenLink Path="@Config.Value.PortalUri" Text="Portaal" target="_self" />/<RadzenLink Path="/" Text="Fact store" target="_self" />/<RadzenLink Path="/roles" Text="Rollen" target="_self" />/ Rol @Name aanpassen
    </div>

<h3>Rol aanpassen</h3>
<h4>Naam: <strong>@Name</strong></h4>
<div style="text-align: right; width:100%">
    <RadzenLink Path="/roles" Text="Terug naar rollen" Style="margin: 0 1rem 1rem 0"/>
</div>

<RadzenTemplateForm Data="@role" Submit="(Role args) => Submit(args)">
    <div class="row">
        <RadzenFieldset Text="Bewerking rol">
            <div class="row" style="margin-bottom:1rem">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Naam" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox Style="width:100%" Name="Name" @bind-Value="@role.Name" />
                    <RadzenRequiredValidator Component="Name" Text="Naam is verplicht" />
                </div>
            </div>
            <div class="row" style="margin-bottom:1rem">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Omschrijving" />
                </div>
                <div class="col-md-8">
                    <RadzenTextArea Style="width:100%" Name="Description" @bind-Value="@role.Description" />
                </div>
            </div>
            <div style="text-align:right; width:100%">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Opslaan" />
            </div>


        </RadzenFieldset>
    </div>
</RadzenTemplateForm>



@code {
    [Inject]
    private IFactStoreServiceClient FactStoreServiceClient { get; set; }

    private Role role = new Role() { };
    private UpdateRole newRole;

    [Parameter]
    public string Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        role= await FactStoreServiceClient.GetRoleAsync(Name);
    }

    async Task Submit(Role role)
    {
        try
        {
            newRole = new UpdateRole { Description = role.Description, NewName = role.Name, PreviousName = Name };
            var result = await FactStoreServiceClient.PutRoleAsync(newRole);
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Succes", Detail = "Rol succesvol aangepast." });
            NavigationManager.NavigateTo("/roles");
        }
        catch (Exception ex)
        {
            role = new Role();
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Oeps! Er is iets fout gegaan.");
        }
    }
}
